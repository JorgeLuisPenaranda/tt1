name: Node.js CI

on:
  push:
    branches:
      - main
      - dev
      - staging
      - prod
  pull_request:
    branches:
      - main
      - dev
      - staging
      - prod

jobs:

  build:
    #needs: preparation
    name: "Build and Test"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}    
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm install
    - run: npm run lint
    - run: npm install --save-dev prettier # install on 2
    - run: npm run prettier
    - run: CI=true npm run test
    - run: npm run build
    - run: pwd
    - run: ls -al
    - uses: actions/upload-artifact@v2
      with:
        name: my-artifact
        path: build/

  preparation:
    needs: build
    name: "Preparation"
    #if: github.ref == 'refs/heads/DONTRUN' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          #terraform_version: 0.12
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      #- name: Terraform Format
      #  id: fmt
      #  run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
      #- name: Terraform Validate
      #  id: validate
      #  run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        #if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Terraform outputs
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        #if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

      - run: pwd
      - run: terraform output web-address
      - run: echo IPUBADDR=$(terraform output web-address) >> $GITHUB_ENV
      - run: echo ${{ env.IPUBADDR }}

      - uses: actions/download-artifact@v2
        with:
          name: my-artifact
          path: builddown/

      - run: ls .
      - run: pwd

      - name: Sleep for 20 seconds
        run: sleep 20s
        shell: bash

      - name: Deploy to my EC2 instance
        uses: easingthemes/ssh-deploy@v2.1.5
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          #SOURCE: "./"
          SOURCE: "builddown/"
          #REMOTE_HOST: "35.164.135.152"
          REMOTE_HOST: ${{ env.IPUBADDR }}
          REMOTE_USER: "ubuntu"
          TARGET: "/var/www/html/"
          #TARGET: "/home/ubuntu/myapp/"
